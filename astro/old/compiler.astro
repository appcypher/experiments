
# August 14, 2018
# Reusable Functions vs Specilaized Functions
- Thinking more about, having generic function implementation where any kind of structure can be passed to it by passing pointers to fields just before the call to such function.
- While such function will be efficient, it will also have an assignment overhead for every function call. I think monomorphization is preferable if Astro wants to be a language about
- performance. Yes, monomorphization increases binary size, however in this case, we want to take performance over size.
- You can always avoid monomorphization by not using generic code. I think this is where JIT shines.

- Functions are resuable in certain. scenarios:
- A function that takes a super type can be reused for its subtypes
- A function can be reused for arguments that have similar structural order and field types

- However functions get monomorphized when:
- an argument is a subtype that does not have the same structural order or type as parent
- the arguments are value types


# TYPE UNCERTAINTY
let x
if some_condition():
	x = "Hi"
else:
	x = 45

print(typeof x) # Str | Int

- The above code shows an example of type uncertainty, and it can be with resolved union splitting.
let foo
if typeof x == Int:
	foo = foo_int
	bar = bar_int_int
else:
	foo = foo_str
	bar = bar_str_str

let y = foo(x)
print('A')
let z = bar(x, y)

# DEALLOCATION
fun main():
    let x = "Hello"
    # can_free(x)
    bar(x)
    print("Hi")

fun bar(x):
    foo(x)
    # should_free(x)
    foo(x)

fun foo(x):
    print(x + 1)
    # free(x)

# ===== TO BE ADDED ====== #
# New Deallocation Scheme
fun main():
    let s = {}
    # == _bar = 0x01 ==
    # mov byte [_bar], 0x01
    bar(s)

fun bar(s):
    foo(s)
    foo(s)
    # == free s ==
    #   mov rax, byte [_bar]
    #   jz label
    #   ret
    # label:
    #   free stuff

# Strict Mode
- The compiler should have a strict mode that encourages certain well-known engineering methods. These are guidelines the compiler
- enforces. They usually affect prototyping productivity, so they are made available through a flag. Here are some of the rules it enforces:
- * All errors must be handled, re-raised or panicked
- * Functions and types must be annotated with types
- * Prevents type uncertainty

- Some of the rules may disabled to suit the teams workflow.
- Along with these, the mode can be hooked with a linter that follows certain guidelines.

#
