#!/usr/bin/env astro

## Version 2
fun foo(a, b, heapvars):
    do_something(a, b)
    # Automatically free resources at the end of function
    free_locals()
    free_externals(heapvars) # Can be inlined.

fun main():
    let x, y = "Hi", Car("Camaro", 2009)
    let heapvars = stackalloc{(AnyPtr, Type)}(2)
    heapvars[1] = (anyptr x, typeof x)
    heapvars[2] = (anyptr y, typeof y)
    foo(x, y, heapvars) # Release x and y after function call.
    print("Hello")
    print("World")

@unsafe
fun free_externals(heapvars):
    if heapvars: for p, t in heapvars:
        destruct(t, p)

main: [
    x: Ptr{Str},
    y: Ptr{Car},
    heapvars[0]: AnyPtr,
    heapvars[1]: Type,
    heapvars[2]: AnyPtr,
    heapvars[3]: Type,
]


destruct(obj) :: {T} (Any) -> None

destruct(t, str) :: (Type{Float}, Str) -> None

destruct(t, car) :: (Type{Int}, Car) -> None

destruct(Str, "Hi")
destruct(Car, Car('Camaro', 2009))
