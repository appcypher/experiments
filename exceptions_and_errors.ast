#!/usr/bin/env astro

#- Difference between Python's Error Moddel and Astro's Error Model
 - * Each expression that can raise must be handled separately
 -#

# Error Propagation
let x = try readfile('readme.md')

# Error handling
let x = try readfile('readme.md'):
	| FileNotFoundError => ""
	| { value } :: Ok => value

let x = readfile('readme.md') !! ""

# Panicking
let x = try! readfile('readme.md')

# Error type annotation
# Even though all error types are subtypes of Error, they cannot be conflated in the return type
fun foo(): :: () -> SomError!|SomeOtherError!|Int
	let x = try bar()
	let y = try baz()

# Fail-safe measures
fun read(filename):
	let f = try! open(filename)
	let string = try read(f)
	print(f)
	ensure: close(f) # Executes whether there is an error or not



## EXAMPLES
if numerator == denominator == 0:
	raise DivideByZero()

try process! bigdata:
	| DataCorruptError(msg) => print msg
ensure: restore! bigdata

let file = try! open('readme.md')
for line in file:
	print line


type Errors is IncompleteDataError | DataCorruptError
fun foo() :: () -> Errors! | Int


# CONTRACTS
fun foo(a, b):
	assert a > b
